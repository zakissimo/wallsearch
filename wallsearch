#!/usr/bin/env python

import re
import os
import tempfile
import webbrowser
from sys import argv
from pathlib import Path
import requests


def init():

    # Checking usage
    if len(argv) != 2:
        print(f"Usage: python {argv[0]} query")
        return 1

    # Querying wallhaven.cc
    user_query = argv[1]
    req = requests.get(
        f"https://wallhaven.cc/api/v1/search?q={user_query}&sorting=views&order=desc"
    )
    output = req.json()["data"]

    # Error handling
    if not output:
        print("Error : No images found")
        return 1

    # Clear terminal and prompt user with instructions
    os.system('cls' if os.name == 'nt' else 'clear')

    display = """
######################################################
##################### Wallsearch #####################
######################################################

Fetching thumbnails from wallhaven.cc, please wait ...

Please delete the thumbnails you don't like.
"""
    print(display)
    return file_proc(output)


# Download and save image
def get_img(url, path):

    req = requests.get(url)
    with open(path, "wb") as file:
        file.write(req.content)


# Checking for a 'Pictures' folder in home directory
def pictures():
    path = f"{Path.home()}{os.path.sep}Pictures"
    if os.path.exists(path):
        return path
    os.mkdir(path)
    return path


def file_proc(output):

    img_log = {}

    # Creating temporary folder
    with tempfile.TemporaryDirectory() as tmp:

        # Looping through json output
        for i, _ in enumerate(output):

            # Saving small thumbnail's url
            url = output[i]["thumbs"]["small"]
            # Saving image id
            image_id = output[i]["id"]
            # Saving full hd image's url link
            image_url = output[i]["path"]
            # Getting file extension
            search = re.search(r"\..{3}$", image_url)
            if not search:
                ext = ".jpg"
            else:
                ext = search.group(0)

            img_log[image_id] = image_url

            # Building full local path to image
            image_path = image_id + ext
            fullpath = tmp + os.path.sep + image_path

            get_img(url, fullpath)

        # Openning tmp folder for user interaction
        webbrowser.open(tmp)
        input("Press Enter key to continue ...")
        print("")

        # For each remaining image in folder
        with os.scandir(tmp) as thumbs:

            # If user deleted every thumbnail
            if not os.listdir(tmp):

                # Display message and exit
                print("Everything was deleted... Terminating now.")
                print("")
                return 0

            print("Downloading FHD images, please wait...")
            print("")

            for entry in thumbs:

                # Get image file name & build full local path
                image_id = os.path.splitext(entry.name)[0]
                fullpath = pictures() + os.path.sep + entry.name

                get_img(img_log[image_id], fullpath)

    # Openning 'Pictures' folder for final display
    webbrowser.open(pictures())
    print("Enjoy your new wallpapers!")
    return 0


if __name__ == "__main__":
    init()
